name: CI

on:
  push:
    branches: ['develop', 'SP-002/daniel/backend-pipeline']
  pull_request:
    branches: ['develop', 'SP-002/daniel/backend-pipeline']

jobs:
  # üîπ LINT / FORMAT / TEST FRONTEND
  lint-format-test-frontend:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout do reposit√≥rio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js e cache npm
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # 3Ô∏è‚É£ Instalar depend√™ncias do frontend
      - name: Install dependencies (frontend)
        working-directory: frontend
        run: npm install

      # 4Ô∏è‚É£ Rodar ESLint no frontend
      - name: Run ESLint (frontend)
        working-directory: frontend
        run: npm run lint

      # 5Ô∏è‚É£ Rodar Prettier check no frontend
      - name: Run Prettier (frontend)
        working-directory: frontend
        run: npm run format:check

  # üîπ LINT / FORMAT / TEST BACKEND
  lint-format-test-backend:
    runs-on: ubuntu-latest
    needs: lint-format-test-frontend

    steps:
      # 1Ô∏è‚É£ Checkout novamente
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js e cache npm
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      # 3Ô∏è‚É£ Instalar depend√™ncias do backend
      - name: Install dependencies (backend)
        working-directory: backend
        run: npm install

      # 4Ô∏è‚É£ Rodar ESLint no backend
      - name: Run ESLint (backend)
        working-directory: backend
        run: npm run lint

      # 5Ô∏è‚É£ Rodar Prettier check no backend
      - name: Run Prettier (backend)
        working-directory: backend
        run: npm run format:check

  # üîπ TYPE CHECK (FRONTEND)
  ts-expo-check:
    runs-on: ubuntu-latest
    needs: lint-format-test-frontend

    steps:
      # 1Ô∏è‚É£ Checkout novamente
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js e cache npm
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # 3Ô∏è‚É£ Instalar depend√™ncias
      - name: Install dependencies
        working-directory: frontend
        run: npm install

      # 4Ô∏è‚É£ Checar TypeScript
      - name: Check TypeScript
        working-directory: frontend
        run: npx tsc --noEmit

      # 5Ô∏è‚É£ Checar Expo prebuild
      - name: Prebuild Expo configuration
        working-directory: frontend
        run: npx expo prebuild --no-install

      # 6Ô∏è‚É£ (Opcional) Export Web
      - name: Export Expo Web (optional)
        working-directory: frontend
        run: |
          CI=true npx expo export --platform web

  # üîπ TYPE CHECK (BACKEND)
  ts-backend-check:
    runs-on: ubuntu-latest
    needs: lint-format-test-backend

    steps:
      # 1Ô∏è‚É£ Checkout novamente
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Setup Node.js e cache npm
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      # 3Ô∏è‚É£ Instalar depend√™ncias
      - name: Install dependencies
        working-directory: backend
        run: npm install

      # 4Ô∏è‚É£ Checar TypeScript
      - name: Check TypeScript (backend)
        working-directory: backend
        run: npx tsc --noEmit
