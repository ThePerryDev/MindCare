name: CI

on:
  push:
    branches: ['develop', 'SP-001/daniel/docker-pipeline']
  pull_request:
    branches: ['develop', 'SP-001/daniel/docker-pipeline']

jobs:
  lint-format-test:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Setup Node.js e cache npm
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # 3️⃣ Instalar dependências
      - name: Install dependencies
        working-directory: frontend
        run: npm install

      # 4️⃣ Rodar ESLint
      - name: Run ESLint
        working-directory: frontend
        run: npm run lint

      # 5️⃣ Rodar Prettier check
      - name: Run Prettier
        working-directory: frontend
        run: npm run format:check

  ts-expo-check:
    runs-on: ubuntu-latest
    needs: lint-format-test

    steps:
      # 1️⃣ Checkout novamente
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Setup Node.js e cache npm
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      # 3️⃣ Instalar dependências
      - name: Install dependencies
        working-directory: frontend
        run: npm install

      # 4️⃣ Checar TypeScript
      - name: Check TypeScript
        working-directory: frontend
        run: npx tsc --noEmit

      # 5️⃣ Checar Expo prebuild
      - name: Prebuild Expo configuration
        working-directory: frontend
        run: npx expo prebuild --no-install


      # 6️⃣ (Opcional) Export Web
      - name: Export Expo Web (optional)
        working-directory: frontend
        run: |
          CI=true npx expo export --platform web
