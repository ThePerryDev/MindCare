name: CI/CD Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build dos containers de teste
      run: |
        echo "🏗️ Construindo imagens Docker para testes..."
        docker-compose -f docker-compose.test.yml build --parallel
        echo "✅ Build concluído com sucesso!"

    - name: Executar testes do Backend
      run: |
        echo "🧪 Executando testes do backend..."
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit backend-test
        echo "✅ Testes do backend concluídos!"

    - name: Executar testes do Frontend
      run: |
        echo "🧪 Executando testes do frontend..."
        docker-compose -f docker-compose.test.yml up --abort-on-container-exit frontend-test
        echo "✅ Testes do frontend concluídos!"

    - name: Coletar relatórios de cobertura
      run: |
        echo "📊 Coletando relatórios de cobertura..."
        # Copiar relatórios de cobertura dos containers
        docker cp mindcare-backend-test:/app/coverage ./backend-coverage || echo "Cobertura do backend não encontrada"
        docker cp mindcare-frontend-test:/app/coverage ./frontend-coverage || echo "Cobertura do frontend não encontrada"
        
        # Copiar relatórios de linting
        docker cp mindcare-frontend-test:/app/eslint-report.json ./eslint-report.json || echo "Relatório ESLint não encontrado"
        
        echo "✅ Relatórios coletados!"

    - name: Upload relatório de cobertura do Backend
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-coverage-report
        path: backend-coverage/
        retention-days: 30

    - name: Upload relatório de cobertura do Frontend
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-coverage-report
        path: frontend-coverage/
        retention-days: 30

    - name: Upload relatório ESLint
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: eslint-report
        path: eslint-report.json
        retention-days: 30

    - name: Executar ESLint no Frontend
      run: |
        echo "🔍 Executando ESLint..."
        docker-compose -f docker-compose.test.yml exec -T frontend-test npx eslint . --ext .ts,.tsx,.js,.jsx || echo "ESLint encontrou problemas"
        echo "✅ Verificação de linting concluída!"

    - name: Executar Prettier no Frontend
      run: |
        echo "💅 Verificando formatação com Prettier..."
        docker-compose -f docker-compose.test.yml exec -T frontend-test npx prettier --check . || echo "Prettier encontrou problemas de formatação"
        echo "✅ Verificação de formatação concluída!"

    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Limpando containers..."
        docker-compose -f docker-compose.test.yml down -v
        docker system prune -f
        echo "✅ Cleanup concluído!"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Executar auditoria de segurança no Backend
      run: |
        echo "🔒 Executando auditoria de segurança no backend..."
        cd backend
        npm audit --audit-level moderate || echo "Vulnerabilidades encontradas no backend"

    - name: Executar auditoria de segurança no Frontend
      run: |
        echo "🔒 Executando auditoria de segurança no frontend..."
        cd frontend
        npm audit --audit-level moderate || echo "Vulnerabilidades encontradas no frontend"

  build-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4

    - name: Build imagens de produção
      run: |
        echo "🚀 Construindo imagens para produção..."
        docker-compose -f docker-compose.yml build
        echo "✅ Build de produção concluído!"

    - name: Salvar artefatos de build
      run: |
        echo "💾 Salvando artefatos de build..."
        docker save mindcare-backend-dev:latest | gzip > backend-image.tar.gz
        docker save mindcare-frontend-dev:latest | gzip > frontend-image.tar.gz

    - name: Upload imagens Docker
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: |
          backend-image.tar.gz
          frontend-image.tar.gz
        retention-days: 7

